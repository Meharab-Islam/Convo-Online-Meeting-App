import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:permission_handler/permission_handler.dart';
import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final _roomController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("WebRTC Room Example")),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _roomController,
              decoration: const InputDecoration(
                labelText: "Enter Room Code",
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                final roomId = _roomController.text.trim();
                if (roomId.isEmpty) return;
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => CallScreen(
                      roomId: roomId,
                      isCaller: true,
                    ),
                  ),
                );
              },
              child: const Text("Create Room"),
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: () {
                final roomId = _roomController.text.trim();
                if (roomId.isEmpty) return;
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => CallScreen(
                      roomId: roomId,
                      isCaller: false,
                    ),
                  ),
                );
              },
              child: const Text("Join Room"),
            ),
          ],
        ),
      ),
    );
  }
}

class CallScreen extends StatefulWidget {
  final String roomId;
  final bool isCaller;

  const CallScreen({super.key, required this.roomId, required this.isCaller});

  @override
  State<CallScreen> createState() => _CallScreenState();
}

class _CallScreenState extends State<CallScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final _localRenderer = RTCVideoRenderer();
  final _remoteRenderer = RTCVideoRenderer();
  RTCPeerConnection? _pc;
  MediaStream? _localStream;

  @override
  void initState() {
    super.initState();
    _initRenderers();
    _startCall();
  }

  Future<void> _initRenderers() async {
    await _localRenderer.initialize();
    await _remoteRenderer.initialize();
  }

  Future<void> _startCall() async {
    // Request permissions
    final cameraStatus = await Permission.camera.request();
    final micStatus = await Permission.microphone.request();

    if (cameraStatus != PermissionStatus.granted ||
        micStatus != PermissionStatus.granted) {
      debugPrint("Camera or Microphone permission denied");
      return;
    }

    try {
      final config = {
        "iceServers": [
          {"urls": "stun:stun.l.google.com:19302"}
        ]
      };

      _pc = await createPeerConnection(config);

      // Get local media
      _localStream = await navigator.mediaDevices.getUserMedia({
        "video": true,
        "audio": true,
      });
      _localRenderer.srcObject = _localStream;

      // Add local tracks
      _localStream!.getTracks().forEach((track) {
        _pc?.addTrack(track, _localStream!);
      });

      // Handle remote tracks
      _pc?.onTrack = (RTCTrackEvent event) {
        if (event.streams.isNotEmpty) {
          setState(() {
            _remoteRenderer.srcObject = event.streams[0];
          });
        }
      };

      // ICE candidates
      final candidatesCol =
          _firestore.collection("calls/${widget.roomId}/candidates");

      _pc?.onIceCandidate = (candidate) {
        if (candidate != null) {
          candidatesCol.add(candidate.toMap());
        }
      };

      final callDoc = _firestore.collection("calls").doc(widget.roomId);

      if (widget.isCaller) {
        // Caller: create offer
        final offer = await _pc!.createOffer();
        await _pc!.setLocalDescription(offer);
        await callDoc.set({"offer": offer.toMap()});

        // Listen for answer
        callDoc.snapshots().listen((snap) async {
          if (_pc == null ||
              _pc!.signalingState == RTCSignalingState.RTCSignalingStateClosed) {
            return;
          }
          if (snap.exists && snap.data()!.containsKey("answer")) {
            final answer = RTCSessionDescription(
                snap["answer"]["sdp"], snap["answer"]["type"]);
            try {
              await _pc!.setRemoteDescription(answer);
            } catch (_) {
              // ignore
            }
          }
        });
      } else {
        // Callee: read offer
        final doc = await callDoc.get();
        if (!doc.exists || !doc.data()!.containsKey("offer")) return;

        final offer =
            RTCSessionDescription(doc["offer"]["sdp"], doc["offer"]["type"]);
        await _pc!.setRemoteDescription(offer);

        final answer = await _pc!.createAnswer();
        await _pc!.setLocalDescription(answer);
        await callDoc.update({"answer": answer.toMap()});
      }

      // Listen for ICE candidates
      candidatesCol.snapshots().listen((snapshot) {
        if (_pc == null ||
            _pc!.signalingState == RTCSignalingState.RTCSignalingStateClosed) {
          return;
        }
        for (var docChange in snapshot.docChanges) {
          if (docChange.type == DocumentChangeType.added) {
            final data = docChange.doc.data()!;
            final candidate = RTCIceCandidate(
              data["candidate"],
              data["sdpMid"],
              data["sdpMLineIndex"],
            );
            try {
              _pc?.addCandidate(candidate);
            } catch (_) {
              // ignore
            }
          }
        }
      });
    } catch (e) {
      debugPrint("Error starting call: $e");
    }
  }

  @override
  void dispose() {
    _localRenderer.dispose();
    _remoteRenderer.dispose();
    _localStream?.dispose();
    _pc?.close();
    _pc = null;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Room: ${widget.roomId}")),
      body: Stack(
        children: [
          // Remote video full screen
          Positioned.fill(
            child: _remoteRenderer.srcObject != null
                ? RTCVideoView(_remoteRenderer)
                : const Center(child: Text("Waiting for remote video...")),
          ),
          // Small local video top-left
          Positioned(
            top: 20,
            left: 20,
            width: 120,
            height: 160,
            child: _localRenderer.srcObject != null
                ? Container(
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.white, width: 2),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: RTCVideoView(_localRenderer, mirror: true),
                  )
                : Container(),
          ),
        ],
      ),
    );
  }
}
